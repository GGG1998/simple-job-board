// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jobs.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs(
    name,
    description,
    level,
    salary_min,
    salary_max,
    employer_id,
    valid_date,
    active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, description, level, location, salary_min, salary_max, employer_id, valid_date, active, created_at
`

type CreateJobParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Level       []LevelJob     `json:"level"`
	SalaryMin   sql.NullString `json:"salary_min"`
	SalaryMax   sql.NullString `json:"salary_max"`
	EmployerID  sql.NullInt32  `json:"employer_id"`
	ValidDate   time.Time      `json:"valid_date"`
	Active      sql.NullBool   `json:"active"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.queryRow(ctx, q.createJobStmt, createJob,
		arg.Name,
		arg.Description,
		pq.Array(arg.Level),
		arg.SalaryMin,
		arg.SalaryMax,
		arg.EmployerID,
		arg.ValidDate,
		arg.Active,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Level),
		&i.Location,
		&i.SalaryMin,
		&i.SalaryMax,
		&i.EmployerID,
		&i.ValidDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT id, name, description, level, location, salary_min, salary_max, employer_id, valid_date, active, created_at FROM jobs WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, id int32) (Job, error) {
	row := q.queryRow(ctx, q.getJobStmt, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Level),
		&i.Location,
		&i.SalaryMin,
		&i.SalaryMax,
		&i.EmployerID,
		&i.ValidDate,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, name, description, level, location, salary_min, salary_max, employer_id, valid_date, active, created_at FROM jobs WHERE active = true ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListJobsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListJobs(ctx context.Context, arg ListJobsParams) ([]Job, error) {
	rows, err := q.query(ctx, q.listJobsStmt, listJobs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Level),
			&i.Location,
			&i.SalaryMin,
			&i.SalaryMax,
			&i.EmployerID,
			&i.ValidDate,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsBy = `-- name: ListJobsBy :many
SELECT id, name, description, level, location, salary_min, salary_max, employer_id, valid_date, active, created_at FROM jobs 
    WHERE active = $3::boolean
    AND (title = COALESCE($4::text, title)) 
    AND (location = COALESCE($5::text, location)) 
    AND (salary_min = COALESCE($6::int, salary_min)) 
    AND (salary_max = COALESCE($7::int, salary_max)) 
ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListJobsByParams struct {
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Active    bool   `json:"active"`
	Title     string `json:"title"`
	Location  string `json:"location"`
	SalaryMin int32  `json:"salary_min"`
	SalaryMax int32  `json:"salary_max"`
}

func (q *Queries) ListJobsBy(ctx context.Context, arg ListJobsByParams) ([]Job, error) {
	rows, err := q.query(ctx, q.listJobsByStmt, listJobsBy,
		arg.Limit,
		arg.Offset,
		arg.Active,
		arg.Title,
		arg.Location,
		arg.SalaryMin,
		arg.SalaryMax,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Level),
			&i.Location,
			&i.SalaryMin,
			&i.SalaryMax,
			&i.EmployerID,
			&i.ValidDate,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
