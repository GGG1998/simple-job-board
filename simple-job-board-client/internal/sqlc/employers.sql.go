// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: employers.sql

package sqlc

import (
	"context"

	"github.com/sqlc-dev/pqtype"
)

const createEmployer = `-- name: CreateEmployer :one
INSERT INTO employers(name, description, social_media_links) VALUES($1, $2, $3) RETURNING id, name, description, social_media_links, created_at, updated_at
`

type CreateEmployerParams struct {
	Name             string                `json:"name"`
	Description      string                `json:"description"`
	SocialMediaLinks pqtype.NullRawMessage `json:"social_media_links"`
}

func (q *Queries) CreateEmployer(ctx context.Context, arg CreateEmployerParams) (Employer, error) {
	row := q.queryRow(ctx, q.createEmployerStmt, createEmployer, arg.Name, arg.Description, arg.SocialMediaLinks)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.SocialMediaLinks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmployerById = `-- name: GetEmployerById :one
SELECT id, name, description, social_media_links, created_at, updated_at from employers WHERE id = $1
`

func (q *Queries) GetEmployerById(ctx context.Context, id int32) (Employer, error) {
	row := q.queryRow(ctx, q.getEmployerByIdStmt, getEmployerById, id)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.SocialMediaLinks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployers = `-- name: ListEmployers :many
SELECT id, name, description, social_media_links, created_at, updated_at from employers ORDER BY created_at LIMIT $1 OFFSET $2
`

type ListEmployersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployers(ctx context.Context, arg ListEmployersParams) ([]Employer, error) {
	rows, err := q.query(ctx, q.listEmployersStmt, listEmployers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employer
	for rows.Next() {
		var i Employer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.SocialMediaLinks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
