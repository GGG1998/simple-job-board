// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: applications.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const listJobApplications = `-- name: ListJobApplications :many

INSERT INTO applications(
    job_id, 
    applicant_id,
    application_date,
    status
) VALUES($1, $2, $3, $4) RETURNING id, job_id, applicant_id, application_date, status, created_at, updated_at
`

type ListJobApplicationsParams struct {
	JobID           sql.NullInt32  `json:"job_id"`
	ApplicantID     sql.NullInt32  `json:"applicant_id"`
	ApplicationDate time.Time      `json:"application_date"`
	Status          sql.NullString `json:"status"`
}

// SELECT sqlc.embed(jobs.*), sqlc.embed(applicants.*)
//
//	FROM applications
//	    JOIN jobs ON jobs.id = applications.job_id
//	    JOIN applicants ON applicants.id = applications.applicant_id
//
// WHERE (applications.job_id = @job_id::int OR applications.applicant_id = @applicant_id::int) AND applications.active;
func (q *Queries) ListJobApplications(ctx context.Context, arg ListJobApplicationsParams) ([]Application, error) {
	rows, err := q.query(ctx, q.listJobApplicationsStmt, listJobApplications,
		arg.JobID,
		arg.ApplicantID,
		arg.ApplicationDate,
		arg.Status,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.ApplicantID,
			&i.ApplicationDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
