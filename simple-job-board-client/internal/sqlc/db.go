// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createApplicantStmt, err = db.PrepareContext(ctx, createApplicant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApplicant: %w", err)
	}
	if q.createEmployerStmt, err = db.PrepareContext(ctx, createEmployer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEmployer: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.getEmployerByIdStmt, err = db.PrepareContext(ctx, getEmployerById); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmployerById: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.listEmployersStmt, err = db.PrepareContext(ctx, listEmployers); err != nil {
		return nil, fmt.Errorf("error preparing query ListEmployers: %w", err)
	}
	if q.listJobApplicationsStmt, err = db.PrepareContext(ctx, listJobApplications); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobApplications: %w", err)
	}
	if q.listJobsStmt, err = db.PrepareContext(ctx, listJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobs: %w", err)
	}
	if q.listJobsByStmt, err = db.PrepareContext(ctx, listJobsBy); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobsBy: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createApplicantStmt != nil {
		if cerr := q.createApplicantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApplicantStmt: %w", cerr)
		}
	}
	if q.createEmployerStmt != nil {
		if cerr := q.createEmployerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEmployerStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.getEmployerByIdStmt != nil {
		if cerr := q.getEmployerByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmployerByIdStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.listEmployersStmt != nil {
		if cerr := q.listEmployersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEmployersStmt: %w", cerr)
		}
	}
	if q.listJobApplicationsStmt != nil {
		if cerr := q.listJobApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobApplicationsStmt: %w", cerr)
		}
	}
	if q.listJobsStmt != nil {
		if cerr := q.listJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsStmt: %w", cerr)
		}
	}
	if q.listJobsByStmt != nil {
		if cerr := q.listJobsByStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsByStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createApplicantStmt     *sql.Stmt
	createEmployerStmt      *sql.Stmt
	createJobStmt           *sql.Stmt
	getEmployerByIdStmt     *sql.Stmt
	getJobStmt              *sql.Stmt
	listEmployersStmt       *sql.Stmt
	listJobApplicationsStmt *sql.Stmt
	listJobsStmt            *sql.Stmt
	listJobsByStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createApplicantStmt:     q.createApplicantStmt,
		createEmployerStmt:      q.createEmployerStmt,
		createJobStmt:           q.createJobStmt,
		getEmployerByIdStmt:     q.getEmployerByIdStmt,
		getJobStmt:              q.getJobStmt,
		listEmployersStmt:       q.listEmployersStmt,
		listJobApplicationsStmt: q.listJobApplicationsStmt,
		listJobsStmt:            q.listJobsStmt,
		listJobsByStmt:          q.listJobsByStmt,
	}
}
